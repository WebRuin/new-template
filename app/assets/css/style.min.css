/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;font-smoothing:antialiased;text-rendering:optimizeLegibility}html{font-size:62.5%}body{font:300 13px/1.6 Helvetica Neue,Helvetica,Arial;color:#444;transition:all .4s ease-in .3s}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.header{height:130px;background-color:#2d4269}.header .container{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:94%;margin:0 auto}.header .hero{padding:0 1.5rem;width:50%;font-family:Playfair Display SC,serif;color:#fff}.header .hero h1{font-size:50px;margin:1rem 0}.header .hero h2{margin-top:-25px;font-size:16px}.header .menu{width:50%;display:-ms-flexbox;display:flex;padding:2rem 0}.header .menu .menu-box{width:33%;border-left:1px solid #fff;margin-right:10px;padding:0 1rem;background-color:#5f2b20;color:#fff}.header .menu .menu-box h2{margin:0;font-size:20px;font-family:Playfair Display SC,serif}.header .menu .menu-box p{margin:0;font-size:12px}@media only screen and (min-device-width:320px) and (max-device-width:480px) and (-webkit-min-device-pixel-ratio:2){.header{height:auto}.header .container{width:85%}.header .hero{text-align:center}.header .hero,.header .menu{width:100%}.header .hero .menu-box h2,.header .menu .menu-box h2{font-size:16px}}@media only screen and (min-device-width:320px) and (max-device-width:480px) and (-webkit-min-device-pixel-ratio:2) and (orientation:portrait){.header .hero .menu-box h2,.header .menu .menu-box h2{font-size:15px}}@media only screen and (min-device-width:375px) and (max-device-width:667px) and (-webkit-min-device-pixel-ratio:2){.header{height:auto}.header .container{width:85%}.header .hero{text-align:center}.header .hero,.header .menu{width:100%}.header .hero .menu-box h2,.header .menu .menu-box h2{font-size:16px}}@media only screen and (min-device-width:375px) and (max-device-width:667px) and (-webkit-min-device-pixel-ratio:2) and (orientation:portrait){.header .hero .menu-box h2,.header .menu .menu-box h2{font-size:15px}}@media only screen and (min-device-width:414px) and (max-device-width:736px) and (-webkit-min-device-pixel-ratio:3){.header .hero,.header .menu{padding:0}.header .hero .menu-box,.header .menu .menu-box{padding-top:1rem;height:130px}.header .hero .menu-box h2,.header .menu .menu-box h2{font-size:15px}}.nav ul{list-style:none}.feature{background-color:#afa663;margin:0;padding:2rem 0}.feature .container{width:94%;margin:3.5rem auto;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.feature .container .feature-text-block,.feature .container .feature-video-block{min-width:300px;max-width:550%;-ms-flex:1;flex:1}.feature .container .feature-text-block .video,.feature .container .feature-video-block .video{width:80%;display:block;margin:0 auto;padding:.75rem;border:1px solid #000}.feature .container .feature-text-block{padding-top:10rem}.feature .container .feature-text-block h2{color:#fff;font-size:32px;margin-bottom:4px;font-family:Playfair Display SC,serif}.feature .container .feature-text-block p{border-top:1px dotted #000;padding:15px 0;margin:10px 0}.feature .container .feature-text-block a{padding:1.5rem;border:1px dotted #000;font-size:18px;font-family:Playfair Display SC,serif;text-decoration:none;color:#5f2b20}.feature .container .feature-text-block a i{margin-left:2rem}@media only screen and (min-device-width:320px) and (max-device-width:480px) and (-webkit-min-device-pixel-ratio:2){.feature{background-color:#afa663;margin:0;padding:2rem 0}.feature .container{width:85%;margin:1rem auto;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-direction:column-reverse;flex-direction:column-reverse}.feature .container .feature-text-block,.feature .container .feature-video-block{width:100%}.feature .container .feature-text-block .video,.feature .container .feature-video-block .video{width:95%;height:90%;padding:0}.feature .container .feature-text-block{padding:0 0 2rem}.feature .container .feature-text-block a{padding:0;border:none}}@media only screen and (min-device-width:320px) and (max-device-width:480px) and (-webkit-min-device-pixel-ratio:2) and (orientation:portrait){.feature{background-color:#afa663;margin:0;padding:2rem 0}.feature .container{width:85%;margin:1rem auto;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.feature .container .feature-text-block,.feature .container .feature-video-block{width:100%}.feature .container .feature-text-block{padding:0 0 2rem}.feature .container .feature-text-block a{padding:0;border:none}}@media only screen and (min-device-width:375px) and (max-device-width:667px) and (-webkit-min-device-pixel-ratio:2){.feature{background-color:#afa663;margin:0;padding:2rem 0}.feature .container{width:85%;margin:1rem auto;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.feature .container .feature-text-block,.feature .container .feature-video-block{width:100%}.feature .container .feature-text-block{padding:0 0 2rem}.feature .container .feature-text-block a{padding:0;border:none}}@media only screen and (min-device-width:375px) and (max-device-width:667px) and (-webkit-min-device-pixel-ratio:2) and (orientation:portrait){.feature{background-color:#afa663;margin:0;padding:2rem 0}.feature .container{width:85%;margin:1rem auto;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.feature .container .feature-text-block,.feature .container .feature-video-block{width:100%}.feature .container .feature-text-block{padding:0 0 2rem}.feature .container .feature-text-block a{padding:0;border:none}}@media only screen and (min-device-width:414px) and (max-device-width:736px) and (-webkit-min-device-pixel-ratio:3){.feature .container .feature-text-block,.feature .container .feature-video-block{width:100%}.feature .container .feature-text-block{padding:10rem 0 2rem}.feature .container .feature-text-block a{padding:0;border:none;font-size:15px}}.resent-articles{background-color:#5f2b20}.resent-articles .container{width:94%;margin:0 auto;padding:4rem 2rem;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:justify;justify-content:space-between}.resent-articles .container article{width:200px;color:#fff}.resent-articles .container article h3{font-size:18px;margin-bottom:-8px;font-family:Playfair Display SC,serif}.resent-articles .container article p{padding-bottom:1rem;border-bottom:1px dotted #fff}@media only screen and (min-device-width:320px) and (max-device-width:480px) and (-webkit-min-device-pixel-ratio:2){.resent-articles .container article{width:100%;color:#fff}.resent-articles .container article h3{font-size:18px;margin-bottom:-8px;font-family:Playfair Display SC,serif}.resent-articles .container article p{padding-bottom:1rem;border-bottom:1px dotted #fff}.resent-articles .container article img{display:block;width:100%;margin:0 auto}}@media only screen and (min-device-width:375px) and (max-device-width:667px) and (-webkit-min-device-pixel-ratio:2){.resent-articles .container article{width:48%;color:#fff}.resent-articles .container article h3{font-size:18px;margin-bottom:-8px;font-family:Playfair Display SC,serif}.resent-articles .container article p{padding-bottom:1rem;border-bottom:1px dotted #fff}.resent-articles .container article img{display:block;width:100%;margin:0 auto}}@media only screen and (min-device-width:414px) and (max-device-width:736px) and (-webkit-min-device-pixel-ratio:3){.resent-articles .container article{width:48%;color:#fff}.resent-articles .container article h3{font-size:18px;margin-bottom:-8px;font-family:Playfair Display SC,serif}.resent-articles .container article p{padding-bottom:1rem;border-bottom:1px dotted #fff}.resent-articles .container article img{display:block;width:100%;margin:0 auto}}::selection{background:#333;color:#fff;text-shadow:none}::-moz-selection{background:#333;color:#fff;text-shadow:none}::-webkit-selection{background:#333;color:#fff;text-shadow:none}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
